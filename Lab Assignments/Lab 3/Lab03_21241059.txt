class Node:
    def __init__(self, e, n):
        self.element = e
        self.next = n


class LinkedList:
  
    def __init__(self, a):
  #  Design the constructor based on data type of a. If 'a' is built in python list then
  #  Creates a linked list using the values from the given array. head will refer
  #  to the Node that contains the element from a[0]
  #  Else Sets the value of head. head will refer
  # to the given LinkedList
  # Hint: Use the type() function to determine the data type of a
        if type(a) is list:
            self.head = Node(a[0], None)
            tail = self.head
            for i in range(1, len(a)):
                new_node = Node(a[i], None)
                tail.next = new_node
                tail = new_node
        else:
            self.head = a
            
    
    def countNode(self):
        count = 0
        temp = self.head
        while temp != None:
            count += 1
            temp = temp.next
            
        return count
    
    
    
    def printList(self):
        temp = self.head
        while temp != None:
            print(temp.element, end=" ")
            temp = temp.next
        print()
            
            
    
    def nodeAt(self, idx):
        length = self.countNode()
        if idx > length:
            return None
        else:
            start = self.head
            for i in range(idx):
                start = start.next
            return start
        
        
    def get(self, idx):
        temp = self.head
        for i in range(idx):
            temp = temp.next
        
        return temp.element
    
    
    def set(self, idx, elem):
        temp = self.head
        for i in range(idx):
            temp = temp.next
            if temp.next is None:
                return None
        
        
        old = temp.element
        temp.element = elem
        print(old)
        
        
    def indexOf(self, elem):
        current = self.head
        index = 0
        while current != None:
            if current.element == elem:
                return index
            index += 1
            current = current.next
            
        return -1
        
        
    def contains(self, elem):
        temp = self.head
        flag = False
        
        while temp != None:
            if temp.element == elem:
                flag = True
                break
            temp = temp.next
            
        return flag
    
    
    def copyList(self):
        new_node = Node(self.head.element, None)
        temp = self.head
        temp1 = self.head.next
        while temp1 != None:
            new_node.next = temp1
            temp1 = temp1.next
            new_node = new_node.next
            
        return temp
    
    
    def reverseList(self):
        temp = self.head
        temp1 = None
        while temp != None:
            new_node = Node(temp.element, None)
            new_node.next = temp1
            temp1 = new_node
            temp = temp.next
        return temp1
    
    
    
    def insert(self, elem, idx):
        count = self.countNode()
        
        if idx < 0 or idx > count:
            raise Exception("Invalid index")
            
        new_node = Node(elem, None)
        if idx == 0:
            temp = self.head
            new_node.next = temp
            self.head = new_node
            return "Valid"
        
        elif idx == count:
            temp = self.nodeAt(count-1)
            temp.next = new_node
            new_node.next = None
            return "Valid"
        
        else:
            temp = self.nodeAt(idx-1)
            temp1 = self.nodeAt(idx)
            temp.next = new_node
            new_node.next = temp1
            return self.head
            

        



    def remove(self, idx):
        count = self.countNode()
        if idx < 0 or idx > count:
            raise Exception("Invalid index")
        
        if idx == 0:
            temp = self.head
            temp1 = self.head.next
            self.head = temp1
            return temp.element
        
        elif idx == count:
            temp = self.nodeAt(count)
            temp1 = self.nodeAt(idx-1)
            temp1.next = None
            return temp.element
        else:
            temp = self.nodeAt(idx-1)
            temp1 = self.nodeAt(idx+1)
            temp2 = self.nodeAt(idx)
            temp.next = temp1
            return temp2.element
        

  
  # Rotates the list to the left by 1 position.
    def rotateLeft(self):
        temp2 = self.head
        self.head = temp2.next
        temp1 = self.nodeAt(self.countNode()-1)
        temp1.next = temp2
        temp2.next = None
        return self.head

  
  # Rotates the list to the right by 1 position.
    def rotateRight(self):
        m = self.countNode()
        l = self.countNode()-2
        new_last = self.nodeAt(l)
        temp = self.nodeAt(m-1)
        temp.next = self.head
        self.head = temp
        new_last.next = None


_________________________________________________________________________________________________________________________


print("////// Test 01 //////")
a1 = [10, 20, 30, 40]
h1 = LinkedList(a1) # Creates a linked list using the values from the array
# head will refer to the Node that contains the element from a[0]

h1.printList() # This should print: 10,20,30,40
print(h1.countNode()) # This should print: 4

print("////// Test 02 //////")
# returns the reference of the Node at the given index. For invalid idx return None.
myNode = h1.nodeAt(1)
print(myNode.element) # This should print: 20. In case of invalid index This will generate an Error.
    
print("////// Test 03 //////")
# returns the element of the Node at the given index. For invalid idx return None.
val = h1.get(2)
print(val) # This should print: 30. In case of invalid index This will print None.

print("////// Test 04 //////")
    
# updates the element of the Node at the given index. 
# Returns the old element that was replaced. For invalid index return None.
# parameter: index, element
         
print(h1.set(1,85)) # This should print: 20
h1.printList() # This should print: 10,85,30,40.
print(h1.set(15,85)) # This should print: None
h1.printList() # This should print: 10,85,30,40. 



# returns the index of the Node containing the given element.
# if the element does not exist in the List, return -1.
index = h1.indexOf(40)
print(index) # This should print: 3. In case of element that doesn't exists in the list this will print -1.
    
print("////// Test 06 //////")
# returns true if the element exists in the List, return false otherwise.
ask = h1.contains(40)
print(ask) # This should print: True.





print("////// Test 07 //////")
a2 = [10,20,30,40,50,60,70]
h2 = LinkedList(a2) # uses theconstructor where a is an built in list
h2.printList() # This should print: 10,20,30,40,50,60,70.  
# Makes a duplicate copy of the given List. Returns the head reference of the duplicate list.
copyH=h2.copyList() # Head node reference of the duplicate list
h3 = LinkedList(copyH) # uses the constructor where a is head of a linkedlist 
h3.printList() # This should print: 10,20,30,40,50,60,70.  


print("////// Test 07 //////")
a2 = [10,20,30,40,50,60,70]
h2 = LinkedList(a2) # uses theconstructor where a is an built in list
h2.printList() # This should print: 10,20,30,40,50,60,70.  
# Makes a duplicate copy of the given List. Returns the head reference of the duplicate list.
copyH=h2.copyList() # Head node reference of the duplicate list
h3 = LinkedList(copyH) # uses the constructor where a is head of a linkedlist 
h3.printList() # This should print: 10,20,30,40,50,60,70.



print("////// Test 08 //////")
a4 = [10,20,30,40,50]
h4 = LinkedList(a4) # uses theconstructor where a is an built in list
h4.printList() # This should print: 10,20,30,40,50.  
# Makes a reversed copy of the given List. Returns the head reference of the reversed list.
revH=h4.reverseList() # Head node reference of the reversed list
h5 = LinkedList(revH) # uses the constructor where a is head of a linkedlist 
h5.printList() # This should print: 50,40,30,20,10. 


print("////// Test 09 //////")
a6 = [10,20,30,40]
h6 = LinkedList(a6) # uses theconstructor where a is an built in list
h6.printList() # This should print: 10,20,30,40.  
    
# inserts Node containing the given element at the given index. Check validity of index.
h6.insert(85,0)
h6.printList() # This should print: 85,10,20,30,40.  
h6.insert(95,3)
h6.printList() # This should print: 85,10,20,95,30,40.  
h6.insert(75,6)
h6.printList() # This should print: 85,10,20,95,30,40,75. 
    
    
    
print("////// Test 10 //////")
a7 = [10,20,30,40,50,60,70]
h7 = LinkedList(a7) # uses theconstructor where a is an built in list
h7.printList() # This should print: 10,20,30,40,50,60,70.  
    
# removes Node at the given index. returns element of the removed node.
# Check validity of index. return None if index is invalid.
    
print("Removed element:",h7.remove(0)) # This should print: Removed element: 10
h7.printList() # This should print: 20,30,40,50,60,70.  
print("Removed element: ",h7.remove(3)) # This should print: Removed element: 50
h7.printList() # This should print: 20,30,40,60,70.  
print("Removed element: ",h7.remove(4)) # This should print: Removed element: 70
h7.printList() # This should print: 20,30,40,60. 
    
    
print("////// Test 11 //////")
a8 = [10,20,30,40]
h8 = LinkedList(a8) # uses theconstructor where a is an built in list
h8.printList() # This should print: 10,20,30,40.  
    
# Rotates the list to the left by 1 position.
h8.rotateLeft()
h8.printList() # This should print: 20,30,40,10.  
    
    
print("////// Test 12 //////")
a9 = [10,20,30,40]
h9 = LinkedList(a9) # uses theconstructor where a is an built in list
h9.printList() # This should print: 10,20,30,40.  
    
# Rotates the list to the right by 1 position.
h9.rotateRight()
h9.printList() # This should print: 40,10,20,30.